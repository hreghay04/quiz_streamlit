import streamlit as st
import random

# Initialisation des questions dans la session pour persistance
if "questions" not in st.session_state:
    # D√©finition des questions
    base_questions = [
        {
            "question": "Quelle est la d√©finition de la RSE ?",
            "options": [
                "Responsabilit√© Sociale des Entreprises",
                "R√©forme du Syst√®me d'Entreprise",
                "R√©duction des Salaires Excessifs",
                "R√©gulation Sociale et √âconomique"
            ],
            "answer": "Responsabilit√© Sociale des Entreprises"
        },
        {
            "question": "Que signifie le sigle SWOT ?",
            "options": [
                "Strengths, Weaknesses, Opportunities, Threats",
                "Systematic Weakness Optimization Technique",
                "Strategic Way of Thinking",
                "Strengths and Weakness Tracking"
            ],
            "answer": "Strengths, Weaknesses, Opportunities, Threats"
        },
        {
            "question": "Qu‚Äôest-ce qu‚Äôun march√© oligopolistique ?",
            "options": [
                "Un march√© avec un seul vendeur",
                "Un march√© domin√© par quelques vendeurs",
                "Un march√© parfaitement concurrentiel",
                "Un march√© sans vendeurs"
            ],
            "answer": "Un march√© domin√© par quelques vendeurs"
        },
        {
            "question": "Quelle est la principale fonction des RH ?",
            "options": [
                "Maximiser les ventes",
                "G√©rer le personnel de l‚Äôentreprise",
                "Cr√©er de nouveaux produits",
                "Analyser la concurrence"
            ],
            "answer": "G√©rer le personnel de l‚Äôentreprise"
        },
        {
            "question": "Que mesure le taux de rentabilit√© ?",
            "options": [
                "La satisfaction des clients",
                "La capacit√© √† g√©n√©rer des profits",
                "Le nombre de ventes",
                "La productivit√© des salari√©s"
            ],
            "answer": "La capacit√© √† g√©n√©rer des profits"
        }
    ]
    # M√©lange des questions et options
    random.shuffle(base_questions)
    for q in base_questions:
        random.shuffle(q["options"])
    st.session_state.questions = base_questions
    # Initialisation des √©tats
    st.session_state.current_q = 0
    st.session_state.score = 0
    st.session_state.validated = False

# R√©cup√©ration des questions
questions = st.session_state.questions

# Configuration de la page
st.set_page_config(
    page_title="Quiz Culture G√©n√©rale",
    layout="centered",
    initial_sidebar_state="expanded"
)

# Sidebar: progression et score
st.sidebar.title("Progression")
st.sidebar.text(f"Question {st.session_state.current_q + 1} / {len(questions)}")
st.sidebar.progress((st.session_state.current_q + 1) / len(questions))
st.sidebar.text(f"Score: {st.session_state.score}")

# Titre principal
st.title("üß† Quiz Culture G√©n√©rale - Gestion")

# Zone principale du quiz
if st.session_state.current_q < len(questions):
    q = questions[st.session_state.current_q]
    st.subheader(q["question"])

    # Choix de la r√©ponse
    selected = st.radio("Choisissez une r√©ponse :", q["options"], key=f"opt_{st.session_state.current_q}")

    # Validation
    if not st.session_state.validated and st.button("Valider", key=f"val_{st.session_state.current_q}"):
        st.session_state.validated = True
        if selected == q["answer"]:
            st.session_state.score += 1
            st.success("Correct ! üéâ")
        else:
            st.error(f"Faux ! La bonne r√©ponse √©tait : **{q['answer']}**")

    # Apr√®s validation, affichage des d√©tails et bouton suivant
    if st.session_state.validated:
        st.markdown(f"- **Votre r√©ponse :** {selected}")
        st.markdown(f"- **Bonne r√©ponse :** {q['answer']}")
        if st.button("Suivant", key=f"next_{st.session_state.current_q}"):
            # Passage √† la question suivante
            st.session_state.current_q += 1
            st.session_state.validated = False

else:
    # Fin du quiz
    st.balloons()
    st.success(f"Quiz termin√© ! Votre score : {st.session_state.score} / {len(questions)} üéØ")
    if st.button("Rejouer"):
        # R√©initialisation compl√®te
        del st.session_state.questions
        st.experimental_rerun()

# Style CSS basique pour l'interface
st.markdown(
    """
    <style>
    .stApp { max-width: 700px; margin: auto; }
    header { background-color: #4CAF50 !important; }
    </style>
    """, unsafe_allow_html=True)
